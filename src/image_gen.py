from PIL import Image
import os
import glob
from collections import defaultdict
from google import genai
from tqdm import tqdm
import random
import time
from dotenv import load_dotenv
import base64
from google.genai import types
def set_up_api():
    load_dotenv()
    GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
    client_gemini = genai.Client(api_key = GOOGLE_API_KEY)
    return client_gemini
def split_text_for_images(number_of_images):
    with open("text.txt", "r", encoding="utf-8") as file:
        text = file.read().strip()

    total_length = len(text)
    chunk_size = total_length // number_of_images  # ƒê·ªô d√†i trung b√¨nh c·ªßa m·ªói ƒëo·∫°n

    chunks = []
    start = 0

    for i in range(number_of_images):
        # X√°c ƒë·ªãnh ƒëi·ªÉm k·∫øt th√∫c g·∫ßn nh·∫•t t·∫°i d·∫•u c√¢u (n·∫øu c√≥)
        end = start + chunk_size
        if i < number_of_images - 1:
            while end < total_length and text[end] not in ".!?":  
                end += 1  # M·ªü r·ªông ƒë·∫øn d·∫•u c√¢u g·∫ßn nh·∫•t ƒë·ªÉ tr√°nh c·∫Øt ngang c√¢u
            if end < total_length - 1:
                end += 1  # Bao g·ªìm c·∫£ d·∫•u c√¢u v√†o ƒëo·∫°n

        chunk = text[start:end].strip()
        chunks.append(chunk)
        start = end  # B·∫Øt ƒë·∫ßu ƒëo·∫°n ti·∫øp theo t·ª´ ƒë√¢y

    return chunks
def describe_image(description, client_gemini, detail_level="short", perspective="neutral", emotion=None, time_setting=None, art_style=None):
    """
    Nh·∫≠n m·ªôt ƒëo·∫°n vƒÉn m√¥ t·∫£ chi ti·∫øt v√† tr·∫£ v·ªÅ m·ªôt c√¢u m√¥ t·∫£ h√¨nh ·∫£nh theo c√°c t√πy ch·ªânh.

    Args:
        description (str): ƒêo·∫°n vƒÉn m√¥ t·∫£ chi ti·∫øt.
        detail_level (str): M·ª©c ƒë·ªô chi ti·∫øt ("short" ho·∫∑c "detailed").
        perspective (str): G√≥c nh√¨n ("subjective" ho·∫∑c "neutral").
        emotion (str, optional): C·∫£m x√∫c ch·ªß ƒë·∫°o (n·∫øu c√≥, v√≠ d·ª•: "mysterious", "romantic").
        time_setting (str, optional): B·ªëi c·∫£nh th·ªùi gian (v√≠ d·ª•: "modern", "medieval", "futuristic").
        art_style (str, optional): Phong c√°ch ngh·ªá thu·∫≠t (v√≠ d·ª•: "realistic", "abstract", "sketch").

    Returns:
        str: M·ªôt c√¢u m√¥ t·∫£ h√¨nh ·∫£nh theo y√™u c·∫ßu.
    """
    
    prompt = f"""
    B·∫°n l√† chuy√™n gia m√¥ t·∫£ h√¨nh ·∫£nh. H√£y ƒë·ªçc ƒëo·∫°n m√¥ t·∫£ d∆∞·ªõi ƒë√¢y v√† t·∫°o m·ªôt m√¥ t·∫£ h√¨nh ·∫£nh theo c√°c ti√™u ch√≠ sau:
    - M·ª©c ƒë·ªô chi ti·∫øt: {"Ng·∫Øn g·ªçn" if detail_level == "short" else "Chi ti·∫øt"}.
    - G√≥c nh√¨n: {"Ch·ªß quan" if perspective == "subjective" else "Trung l·∫≠p"}.
    {f"- C·∫£m x√∫c ch·ªß ƒë·∫°o: {emotion}." if emotion else ""}
    {f"- B·ªëi c·∫£nh th·ªùi gian: {time_setting}." if time_setting else ""}
    {f"- Phong c√°ch ngh·ªá thu·∫≠t: {art_style}." if art_style else ""}

    ƒêo·∫°n m√¥ t·∫£:
    {description}

    H√£y t·∫°o m·ªôt m√¥ t·∫£ h√¨nh ·∫£nh ph√π h·ª£p v·ªõi y√™u c·∫ßu tr√™n b·∫±ng Ti·∫øng Anh.
    """

    try:
        response = client_gemini.models.generate_content(
            model = "gemini-2.0-flash", contents = [prompt]
        )
        return response.text.strip()
    except Exception as e:
        print(f"L·ªói khi g·ªçi API Gemini: {e}")
        return ""
def generate_image(prompt, client, output_path, style=None, color_palette=None):
    """
    T·∫°o h√¨nh ·∫£nh t·ª´ m√¥ t·∫£ vƒÉn b·∫£n v·ªõi c√°c t√πy ch·ªânh linh ho·∫°t.
    
    :param prompt: M√¥ t·∫£ h√¨nh ·∫£nh ƒë·∫ßu v√†o.
    :param output_path: ƒê∆∞·ªùng d·∫´n l∆∞u ·∫£nh ƒë·∫ßu ra.
    :param style: Phong c√°ch h√¨nh ·∫£nh (n·∫øu c√≥, v√≠ d·ª•: 'realistic', 'anime', 'cyberpunk').
    :param color_palette: B·∫£ng m√†u ∆∞u ti√™n (n·∫øu c√≥, v√≠ d·ª•: 'vibrant', 'monochrome').
    """
    custom_prompt = f"Create an image based on the following description: {prompt}"
    
    if style:
        custom_prompt += f" in {style} style"
    if color_palette:
        custom_prompt += f" with {color_palette} color scheme"
    
    try:
        response = client.models.generate_content(
            model="gemini-2.0-flash-exp-image-generation",
            contents=custom_prompt,
            config=types.GenerateContentConfig(
                response_modalities=['Text', 'Image']
            )
        )
        
        for part in response.candidates[0].content.parts:
            if part.text is not None:
                print("üîπ API returned text:", part.text)
            elif part.inline_data is not None:
                print("üîπ API returned an image (base64 detected)")
                print(f"üîç Base64 data length: {len(part.inline_data.data)} bytes")

                try:
                    # Gi·∫£i m√£ base64
                    image_data = base64.b64decode(part.inline_data.data)
                    with open(output_path, "wb") as f:
                        f.write(image_data)

                    print(f"‚úÖ Successfully saved image as {output_path}")
                except Exception as e:
                    print(f"‚ùå Error decoding and saving image: {e}")
    except Exception as e:
        print(f"L·ªói khi g·ªçi API Gemini: {e}")

def image_gen(number_of_images = 3,detail_level = "short", perspective="neutral", emotion=None, time_setting=None, art_style=None, style=None, color_palette=None):
    client_gemini = set_up_api()
    texts = split_text_for_images(number_of_images)
    index = 0
    for text in tqdm(texts, desc="Processing", unit="image"):
        output_path = f"{index}.png"
        prompt = describe_image(text, client_gemini, detail_level, perspective, emotion, time_setting, art_style)
        print(prompt)
        generate_image(prompt, client_gemini, output_path, style, color_palette)
        index += 1
if __name__ == "__main__":
    image_gen(number_of_images = 1,detail_level = "short", perspective="neutral", emotion=None, time_setting=None, art_style=None, style=None, color_palette=None)